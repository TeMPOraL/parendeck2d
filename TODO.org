#+title: TODO
#+startup: hidestars
#+todo: TODO DOING | DONE CANCELLED
#+todo: BUG FIXING | FIXED CANT_REPRODUCE


* Design notes

** Error handling policy
   2 goals:
   - for development, we want errors to be loud and clear -> log + condition, debugger break
   - for release, we want errors to be silent (non-crashing) -> log + some default values provided (e.g. default texture)

   Continuable restarts in development mode for things that *can* be fixed - e.g. restart for loading a resource
   to provide a different path.

* Things to do
** Functionality
*** Matrix operations

*** Migrating drawing to OpenGL core profile

*** Drawing textured quads
**** DONE Load image

**** DONE Draw a textured quad given the image

**** DONE Clean the above up
     CLOSED: [2017-01-19 czw 01:45]

**** TODO Add error handling

**** TODO Configurable min/mag filters (and maybe wrap)

**** TODO Render-to-texture

**** TODO Make texture loader properly compute texture image data from surface image data

**** TODO Give the ability to somehow flip the texture
     Either on load or on display.
     Point being, SDL_ttf seems to render text upside down and in weird format (BGRA maybe?).
     So this also needs proper handling of SDL_Surface image data.

*** Writing text
    Need an API proposal.

    Simplest API proposal - direct drawing:
    #+BEGIN_SRC lisp
      (draw-text "Hello world" :position position)  ; uses default font and size
      (draw-text "Hello world" :x x :y y)     ; uses default font and size
      (draw-text "Hello world" :x x :y y :size size) ; text with non-default size
      (draw-text "Hello world" :position position :font some-font) ; uses specific font
    #+END_SRC

**** How to draw text
     - load font
       font types:
       - ttf / open font types / etc.
       - bitmap font (texture)

**** DONE Load a TTF font
     CLOSED: [2017-01-19 czw 02:37]

**** DOING Code for rendering a text into a texture

**** DOING Code for convenient display of such rendered text

**** TODO (far future) Bitmap font handling under the same abstraction

**** TODO ERROR HANDLING

**** TODO Sort out caching issues for fonts

**** TODO Test performance of rendering some texts each frame

**** TODO Create an object/method structure for the drawable text that font drawing is supposed to return

**** TODO Maybe move fonts to font.lisp, or sth.

*** Logging
**** DONE Get the logger to register and log down all conditions.
**** DONE Get the logger to flush the file ASAP, so that we won't loose data in case of a crash.
**** DONE Get the logger to log a backtrace in case of a fatal error.

*** Configuration
    Something to read configs from an external source.
    Also that would make games avoid writing over global engine variables so much.

*** Asset management
    Needs to work with both bundled games and ones run interactively from sources.

*** ECS
    We'll be implementing an entity/component/system architecture for managing the game.

*** Test scene (default-game)

**** DONE (important) ensure it runs on a fixed-step delta and detached rendering
     CLOSED: [2017-01-19 czw 02:43]

**** DOING Make it display engine name

**** TODO Make it display engine logo

***** TODO Make a logo

**** TODO Add an FPS counter

*** UI Overlays
**** TODO FPS counter overlay

**** TODO FPS graph overlay

**** TODO (Maybe) Keyboard/Mouse events overlay
     (showing last few events that happened)

** Utilities
*** DOING Color wrapper
    Something to make using colors better / more convenient.

*** DONE Basic OpenGL shapes in a nicer interface (point-and-draw)
    Things like: box, square, circles, regular polygons, etc.

*** TODO Basic collision detection utilities

**** TODO Box-box intersection
**** TODO Box-sphere intersection
**** TODO Box-line intersection
**** TODO Sphere-line intersection
**** TODO Something for more complex shapes

* Bugs

  Stored in issues.
