#+title: TODO
#+startup: hidestars
#+todo: TODO DOING | DONE CANCELLED
#+todo: BUG FIXING | FIXED CANT_REPRODUCE


* Design notes

** Error handling policy
   2 goals:
   - for development, we want errors to be loud and clear -> log + condition, debugger break
   - for release, we want errors to be silent (non-crashing) -> log + some default values provided (e.g. default texture)

   Continuable restarts in development mode for things that *can* be fixed - e.g. restart for loading a resource
   to provide a different path.

* Things to do
** Functionality
*** Matrix operations

*** Migrating drawing to OpenGL core profile

*** Drawing textured quads
**** DONE Load image

**** DONE Draw a textured quad given the image

**** DONE Clean the above up
     CLOSED: [2017-01-19 czw 01:45]

**** TODO Add error handling

**** TODO Configurable min/mag filters (and maybe wrap)

**** TODO Render-to-texture

**** DONE Make texture loader properly compute texture image data from surface image data
     CLOSED: [2017-01-20 pią 20:31]

**** TODO Give the ability to somehow flip the texture
     Either on load or on display.
     Point being, SDL_ttf seems to render text upside down and in weird format (BGRA maybe?).
     So this also needs proper handling of SDL_Surface image data.

*** Writing text
    Need an API proposal.

    Simplest API proposal - direct drawing:
    #+BEGIN_SRC lisp
      (draw-text "Hello world" :position position)  ; uses default font and size
      (draw-text "Hello world" :x x :y y)     ; uses default font and size
      (draw-text "Hello world" :x x :y y :size size) ; text with non-default size
      (draw-text "Hello world" :position position :font some-font) ; uses specific font
    #+END_SRC

**** How to draw text
     - load font
       font types:
       - ttf / open font types / etc.
       - bitmap font (texture)

**** DONE Load a TTF font
     CLOSED: [2017-01-19 czw 02:37]

**** DONE Code for rendering a text into a texture
     CLOSED: [2017-01-20 pią 20:31]

**** DOING Code for convenient display of such rendered text

**** TODO (far future) Bitmap font handling under the same abstraction

**** TODO ERROR HANDLING

**** TODO Sort out caching issues for fonts

**** TODO Test performance of rendering some texts each frame

**** TODO Create an object/method structure for the drawable text that font drawing is supposed to return

**** TODO Maybe move fonts to font.lisp, or sth.

**** TODO Maybe even s/font/face/, because it seems that our "font" might be a combination of font + size.

**** NOTE RE sizes
     Maybe we can design the API so that rendered font's size is the "best" size to use,
     but have the API rescale text automagically to fit in pixel size.

     Also NOTE that while in testing, passed font's height was 42 (pt, but SDL_ttf documentation says
     it's essentially equivalent to px), the resulting texture was 47px high. Need to find out if this is
     some kind of border, or overline/underline magic, or what?
     Checking TTF_FontHeight would be cool, but that might require patching the bindings up.

*** Logging
**** DONE Get the logger to register and log down all conditions.
**** DONE Get the logger to flush the file ASAP, so that we won't loose data in case of a crash.
**** DONE Get the logger to log a backtrace in case of a fatal error.

*** Configuration
    Something to read configs from an external source.
    Also that would make games avoid writing over global engine variables so much.

*** Asset management
    Needs to work with both bundled games and ones run interactively from sources.

*** ECS
    We'll be implementing an entity/component/system architecture for managing the game.

*** Test scene (default-game)

**** DONE (important) ensure it runs on a fixed-step delta and detached rendering
     CLOSED: [2017-01-19 czw 02:43]

**** DOING Make it display engine name

**** TODO Make it display engine logo

***** TODO Make a logo

**** TODO Add an FPS counter

*** UI Overlays
**** TODO FPS counter overlay

**** TODO FPS graph overlay

**** TODO (Maybe) Keyboard/Mouse events overlay
     (showing last few events that happened)

** Utilities
*** DOING Color wrapper
    Something to make using colors better / more convenient.

*** DONE Basic OpenGL shapes in a nicer interface (point-and-draw)
    Things like: box, square, circles, regular polygons, etc.

*** TODO Basic collision detection utilities

**** TODO Box-box intersection
**** TODO Box-sphere intersection
**** TODO Box-line intersection
**** TODO Sphere-line intersection
**** TODO Something for more complex shapes

* Bugs

  Stored in issues.

* /b/

** Notes on converting loaded image surfaces to textures
   Getting texture loading right.
   - supported pixelformats -> textures
   - unsupported pixelformats should barf an error
   - flipping if needed (not sure if it can be determined from surface data though)

   Pixel data types we need to care about: GL_RGB, GL_BGR, GL_RGBA, GL_BGRA.
   Internal data types we need to care about: GL_RGB, GL_RGBA, and maybe GL_SRGB8 and GL_SRGB8_ALPHA_8

   SDL_ConvertSurface (or rather, SDL_ConvertSurfaceFormat) could be useful to get it into a proper format if it isn't in one. Actually, unless we hit performance limit, this would be preferred solution because of simplicity.
   (setf use-alpha (ispixelformat-alpha surface->format))

   (if (or (ispixelformat-indexed surface->format)
   (and (not (= (bytes-per-pixel surface->format 3)))
   (not (= (bytes-per-pixel surface->format 4)))
   (convert-surface surface use-alpha)
   (return (if use-alpha
   :rgba
   :rgb)))

   ;; TODO handling of RGB / BGR and RGBA / BGRA
   has-blue-channel-first --> BGR24 | BGR888 | BGRA8888

   NOTE: X86 is little-endian, FWIW.

   Right now we went the lazy way and did a force-convert with SDL_ConvertSurfaceFormat.
   Would be cool to replace it in the future because of performance and memory reasons.

** Piece of log from testing SDL image surface loading
   #+BEGIN_QUOTE
     
<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex.gif"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3B8A10)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :INDEX8 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex.jpg"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 384
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3C68E0)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :RGB24 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex.tga"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 512
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC42D870)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :ARGB8888 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_24bit.bmp"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 384
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3B8A10)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :BGR24 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_32bit_argb.bmp"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 512
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3B8A10)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :RGBA8888 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_32bit_xrgb.bmp"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 512
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3B8A10)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :RGBX8888 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_24bit.png"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 384
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3D8390)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :RGB24 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_32bit.png"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 512
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3FD0E0)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :ABGR8888 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_lzw.tiff"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 512
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3FD0E0)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :ABGR8888 


<DEBUG> [00:42:34] p2d filegNgwby (load-debug-images-and-dump-info load-img-and-dump-info) -
  PARENDECK2D::IMG: "assets/trc_tex_packed.tiff"
  (SDL2:SURFACE-WIDTH PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-HEIGHT PARENDECK2D::LOADED-IMG): 128
  (SDL2:SURFACE-PITCH PARENDECK2D::LOADED-IMG): 512
  (SDL2:SURFACE-FORMAT
   PARENDECK2D::LOADED-IMG): #.(SB-SYS:INT-SAP #X7FFFDC3FD0E0)
  (SDL2:SURFACE-FORMAT-FORMAT PARENDECK2D::LOADED-IMG): :ABGR8888 
   #+END_QUOTE
